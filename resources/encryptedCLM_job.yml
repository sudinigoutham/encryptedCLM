# The main job for encryptedCLM.
resources:
  jobs:
    encryptedCLM_job:
      name: encryptedCLM_job
      description: Set Up for a Health & Life Sciences Demo of Unity Catalog's Column Level Masking Features Using a Symmetric Encrpytion Method 

      schedule:
        # Run every day at 8:37 AM
        quartz_cron_expression: '44 37 8 * * ?'
        timezone_id: Europe/Amsterdam

      email_notifications:
        on_failure:
          - goutham.sudini@molinahealthcare.com

      tasks:
        - task_key: catalog_schema_setup
          description: Creates the catalog and schema for the demo's data.  
          # job_cluster_key: job_cluster
          notebook_task:
            notebook_path: ../src/catalog_schema_setup.py
        - task_key: create_mask_group
          description: Creates a workspace group to add users for encrpytion masking at the column level.  
          notebook_task:
            notebook_path: ../src/create_mask_group.py
        - task_key: set_encrpyption_key
          description: Sets an encrpytion key to use for the demo in a Databricks Secret  
          depends_on:
            - task_key: create_mask_group
          notebook_task:
            notebook_path: ../src/set_encrpytion_key.py
        - task_key: register_sql_udfs
          description: Register SQL UDFs to encrpyting text and decrpyting text  
          depends_on:
            - task_key: catalog_schema_setup
            - task_key: set_encrpyption_key
          run_if: ALL_SUCCEEDED
          notebook_task:
            notebook_path: ../src/register_sql_udfs.sql
            warehouse_id: ${var.warehouse_id}
        - task_key: register_mask_udf
          description: Register the masking function 
          depends_on:
            - task_key: register_sql_udfs
          notebook_task:
            notebook_path: ../src/register_mask_udf.py
        - task_key: available_hv_data
          description: Determines the Health Verity tables available to copy.  
          depends_on:
            - task_key: catalog_schema_setup
          notebook_task:
            notebook_path: ../src/available_hv_data.py
        - task_key: table_creation
          description: Copy each of the HV tables to the desired catalog and schema 
          depends_on:
            - task_key: available_hv_data
          for_each_task:
            inputs: "{{tasks.[available_hv_data].values.[hv_tables]}}"
            concurrency: 6
            task:
              task_key: table_creation_iteration
              notebook_task:
                notebook_path: ../src/create_or_replace_tables.sql
                base_parameters:
                  table_name: "{{input}}"
                warehouse_id: ${var.warehouse_id}
        - task_key: tables_with_pii
          description: Determines which tables have pii (patient_id and/or npi) 
          depends_on:
            - task_key: table_creation
          notebook_task:
            notebook_path: ../src/tables_with_pii.py
        - task_key: apply_tags_patient_id
          description: Applies the pii = true tag to the patient_id column  
          depends_on:
            - task_key: tables_with_pii
          for_each_task:
            inputs: "{{tasks.[tables_with_pii].values.[patient_id_tables]}}"
            concurrency: 6
            task:
              task_key: apply_tags_patient_id_iteration
              notebook_task:
                notebook_path: ../src/apply_tags_patient_id.sql
                base_parameters:
                  table_name: "{{input}}"
                warehouse_id: ${var.warehouse_id}
        - task_key: apply_tags_npi
          description: Applies the pii = true tag to the npi column  
          depends_on:
            - task_key: tables_with_pii
          for_each_task:
            inputs: "{{tasks.[tables_with_pii].values.[npi_tables]}}"
            concurrency: 6
            task:
              task_key: apply_tags_npi_iteration
              notebook_task:
                notebook_path: ../src/apply_tags_npi.sql
                base_parameters:
                  table_name: "{{input}}"
                warehouse_id: ${var.warehouse_id}
        - task_key: apply_mask
          description: Register SQL UDFs to encrpyting text and decrpyting text  
          depends_on:
            - task_key: apply_tags_npi
            - task_key: apply_tags_patient_id
            - task_key: register_mask_udf
          run_if: ALL_SUCCEEDED
          notebook_task:
            notebook_path: ../src/apply_mask.py


          
        
      # job_clusters:
      #   - job_cluster_key: job_cluster
      #     new_cluster:
      #       spark_version: 13.3.x-scala2.12
      #       node_type_id: i3.xlarge
      #       autoscale:
      #           min_workers: 1
      #           max_workers: 4

      queue:
        enabled: true

      parameters:
        - name: bundle.workspace.file_path
          default: /Workspace${workspace.file_path}
        - name: bundle.target
          default: ${bundle.target}
        - name: bundle.catalog
          default: molina_eim_lab_ws